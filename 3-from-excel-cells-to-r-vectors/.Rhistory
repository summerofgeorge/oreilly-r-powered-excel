coworkers <- c("Cher", "Prince", "Bono", "Shakira", "Enya")
coworkers
coworkers[c(1, 4)]
coworkers[c(0+1, 2^2)]
x  <- 1:4
y  <-  c(TRUE, FALSE, TRUE, FALSE)
z  <-  x * y
z
# Use R as a calculator
1 + 1
5 == 4
10 < 11
6 ^ 2 != 36
sum(1,2,3,4,5)
sqrt(25)
abs(-100)
# Not this!
Sqrt(25)
SQRT(25)
help(sqrt)
?sqrt
plot(x <- sort(rnorm(47)), type = "s", main = "plot(x, type = \"s\")")
?plot
points(x, cex = .5, col = "dark red")
result <- sum(1:5)
# Print the result
result
sqrt(result)
# Remove the object from our environment
rm(result)
# Questions?
# Questions?
# Save your script now :)
?data.frame
roster <- data.frame(
name = c("Jack", "Jill", "Billy", "Susie"),
grade = c(90, 85, 62, 97))
# Print and get to know it
roster
# Structure
?str
# Structure
str(roster)
# Dimensions
dim(roster)
# Number of rows and columns
nrow(roster)
ncol(roster)
# Check out R's built-in datasets
data()
# Let's use iris!
iris
names(iris)
dim(iris)
str(iris)
dim(iris)
names(iris)
iris
head(iris)
# Want to see more?
head(iris, 10)
iris[1,1]
iris[2,2]
iris[1:3,1:3]
# Pull non contiguous regions with vectors!
iris[c(5,10,15), c(1,3)]
iris[ ,1:2]
# All columns in rows 1:2
iris[1:2,]
# Rather than index columns, use $ sign
iris[,2]
# Rather than index columns, use $ sign
iris[2, ]
# Rather than index columns, use $ sign
iris[, 2]
iris$Sepal.Width
# Each column is a vector
is.vector(iris$Sepal.Length)
# Create calculated columns
iris$SepalRatio <- iris$Sepal.Length/iris$Sepal.Width
iris$SepalRatioRoot <- sqrt(iris$SepalRatio)
# Column names are separate from the data
colnames(iris)
is.vector(colnames(iris))
colnames(iris)[c(1,3)]
# Can even re-assign them
iris_typo <- iris
colnames(iris_typo) <- c("Sepal.Length","Sepal.Width","Petal.Length",
"Petal.Width", "Speceis")
colnames(iris_typo)
colnames(iris) <- c("Sepal.Length","Sepal.Width","Petal.Length",
"Petal.Width", "Species", "Sepal.Ratio", "Sepal.Ratio.Root")
colnames(iris_typo)
# What can the docs tell us
# about data frames?
?data.frame
# Create a base data frame
roster <- data.frame(
name = c("Jack", "Jill", "Billy", "Susie"),
grade = c(90, 85, 62, 97))
# Print and get to know it
roster
# Structure
str(roster)
# Dimensions
dim(roster)
# Number of rows and columns
nrow(roster)
ncol(roster)
# Check out R's built-in datasets
data()
# Let's use iris!
str(iris)
dim(iris)
iris
# Getting to bigger data sets --
# glimpse beginning of data frame instead
head(iris)
# Want to see more?
head(iris, 10)
# Index a data frame: df[row, column]
# Like Excel INDEX()!
iris[1,1]
iris[2,2]
iris[1:3,1:3]
# Pull non contiguous regions with vectors!
iris[c(5,10,15), c(1,3)]
# Leave arguments blank to get entire rows and columns
# All columns in rows 1:2
iris[1:2,]
# All rows in columns 1:2
iris[ ,1:2]
# Rather than index columns, use $ sign
iris[, 2]
iris$Sepal.Width
# Each column is a vector
is.vector(iris$Sepal.Length)
# Create calculated columns
iris$SepalRatio <- iris$Sepal.Length/iris$Sepal.Width
iris$SepalRatioRoot <- sqrt(iris$SepalRatio)
# Column names are separate from the data
colnames(iris)
is.vector(colnames(iris))
colnames(iris)[c(1,3)]
# Can even re-assign them
colnames(iris) <- c("Sepal.Length","Sepal.Width","Petal.Length",
"Petal.Width", "Species", "Sepal.Ratio", "Sepal.Ratio.Root")
colnames(iris)
# Can even re-assign them
colnames(iris) <- c("Sepal.Length","Sepal.Width","Petal.Length",
"Petal.Width", "Species", "Sepal.Ratio", "Sepal.Ratio.Root")
colnames(iris)
# What can the docs tell us
# about data frames?
?data.frame
# Create a base data frame
roster <- data.frame(
name = c("Jack", "Jill", "Billy", "Susie"),
grade = c(90, 85, 62, 97))
# Print and get to know it
roster
# Structure
str(roster)
# Dimensions
dim(roster)
# Number of rows and columns
nrow(roster)
ncol(roster)
# Check out R's built-in datasets
data()
# Let's use iris!
str(iris)
dim(iris)
iris
# Getting to bigger data sets --
# glimpse beginning of data frame instead
head(iris)
# Want to see more?
head(iris, 10)
# Index a data frame: df[row, column]
# Like Excel INDEX()!
iris[1,1]
iris[2,2]
iris[1:3,1:3]
# Pull non contiguous regions with vectors!
iris[c(5,10,15), c(1,3)]
# Leave arguments blank to get entire rows and columns
# All columns in rows 1:2
iris[1:2,]
# All rows in columns 1:2
iris[ ,1:2]
# Rather than index columns, use $ sign
iris[, 2]
iris$Sepal.Width
# Each column is a vector
is.vector(iris$Sepal.Length)
# Create calculated columns
iris$SepalRatio <- iris$Sepal.Length/iris$Sepal.Width
iris$SepalRatioRoot <- sqrt(iris$SepalRatio)
# Column names are separate from the data
colnames(iris)
is.vector(colnames(iris))
colnames(iris)[c(1,3)]
colnames(iris)[c(1,3)]
# Can even re-assign them
colnames(iris) <- c("Sepal.Length","Sepal.Width","Petal.Length",
"Petal.Width", "Species", "Sepal.Ratio", "Sepal.Ratio.Root")
colnames(iris)
mtcars
# How many rows and columns are there?
dim(mtcars)
nrows(mtcars)
ncol(mtcars)
nrow(mtcars)
ncol(mtcars)
# Assign the first dozen rows to mtcars_head.
mtcars_head <- head(mtcars, 12)
mtcars_head
# Using the log() function, create a column hp_log
# which is a log-transformation of the column hp.
mtcars$hp_log <- log(mtcars$hp)
head(mtcars$hp_log)
# Rename the column mpg as miles_per_gallon
colnames(mtcars)
colnames(mtcars)[1]
colnames(mtcars)[1] <- "miles_per_gallon"
colnames(mtcars)
library(Lahman)
# New dataset -- Sean Lahman's baseball stats
# http://www.seanlahman.com/baseball-archive/statistics/
install.packages(Lahman)
# New dataset -- Sean Lahman's baseball stats
# http://www.seanlahman.com/baseball-archive/statistics/
install.packages("Lahman")
library(Lahman)
# What datasets are available?
data(package = "Lahman")
# Introduce them to our environment
data("Teams")
data("Master")
data("HallOfFame")
# Check them out
head(Teams)
head(Master)
head(HallOfFame)
# install.packages("openxlsx")
library(openxlsx)
# Write Teams to a worksheet
write.xlsx(Teams, file = "C:/RFiles/teams.xlsx")
# write Teams to a worksheet -- as a table!
write.xlsx(Teams, file = "C:/RFiles/teams_table.xlsx", asTable = TRUE)
## write a list of data.frames to individual worksheets using list names as worksheet names
l <- list("teams" = Teams, "people" = Master, "hall_of_fame" = HallOfFame)
write.xlsx(l, file = "C:/RFiles/baseball.xlsx", asTable = TRUE)
### Read them back in
teams_2 <- read.xlsx("C:/RFiles/teams.xlsx")
head(teams_2)
teams_3 <- read.xlsx("C:/RFiles/baseball.xlsx", sheet = "teams")
head(teams_3)
library(readxl)
hall_of_fame <- read_excel("C:/Rfiles/Baseball.xlsx", sheet = "hall_of_fame")
head(hall_of_fame)
people <- read_excel("C:/Rfiles/Baseball.xlsx", sheet = 3)
head(hall_of_fame)
library(nycflights13)
data(package = "nycflights13")
library(openxlsx)
library(readxl)
l <- list("airlines" = airlines, "airports" = airports, "planes" = planes)
write.xlsx(l, file = "C:/RFiles/nycflights.xlsx", asTable = TRUE)
# the openxlsx way
planes_xl <- read.xlsx("C:/RFiles/nycflights.xlsx", sheet = "planes")
head(planes_xl)
# the readxl way
airports_xl <- read_excel("C:/Rfiles/nycflights.xlsx", sheet = "airports")
head(airports_xl)
# dplyr can be found in the tidyverse
library(tidyverse)
# Use Lahman datasets again
library(Lahman)
# Let's use teams
data("Teams")
# for ease of coding
teams <- Teams
head(teams)
names(teams)
mutate(teams, Wpct = W / (W + L))
mutate(teams, Wpct = W / (W + L))
names(teams)
teams <- mutate(teams, Wpct = W / (W + L))
head(teams)
teams <- mutate(teams, logR = log(R),
logAB = log(AB),
logH = log(H))
head(teams)
is.character(teams$teamID)
is.character(teams$teamID)
head(teams$teamID)
str(teams$teamID)
head(teams$teamID)
str(teams$teamID)
teams <- mutate(teams, teamIDchar = as.character(teamID))
names(teams)
is.character(teams$teamIDchar)
teams_short <- select(teams,yearID, teamID, W, L)
dim(teams_short)
head(teams_short)
# Use functions to select
winners <- select(teams, ends_with("ID"), ends_with("Win"))
dim(winners)
head(winners)
winners2 <- select(teams, ends_with("Win"))
dim(winners2)
# Select by number index
teams_one_through_five <- select(teams, 1:5)
head(teams_one_through_five)
# DROP variables with a minus sign
teams_short <- select(teams, -10:20)
# DROP variables with a minus sign
teams_no_year <- select(teams, -yearID)
teams_no_year
teams_no_year$yearID
# DROP variables with a minus sign
teams_no_year <- select(teams, -yearID)
teams_no_year$yearID
# DROP variables with a minus sign
teams_no_year <- select(teams, -yearID)
teams_no_year$yearID
# Dropping multiple variables -- pass through index
teams_no_year_lg <- select(teams, -c(yearID, lgID))
teams_no_year_lg$yearID
teams_no_year_lg$lgID
# Or "deselect" by index number
teams_less_five <- select(teams, -5)
# Or "deselect" by index number
teams_less_five <- select(teams, -5)
ncol(teams) - ncol(teams_less_five)
rename <- rename(teams, year = yearID, DivisionID = divID)
names(rename)
?rename
?bind_rows
